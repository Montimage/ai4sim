import { Response } from 'express';
import { AuthRequest } from '../middleware/auth';
import { ScenarioService } from '../services/ScenarioService';
import { AppError } from '../utils/AppError';
import { logger } from '../utils/logger';
import { Project } from '../models/Project';
import { Campaign } from '../models/Campaign';
import { isValidObjectId } from 'mongoose';

export class ScenarioController {
  private scenarioService: ScenarioService;

  constructor() {
    this.scenarioService = ScenarioService.getInstance();
  }

  /**
   * R√©cup√®re tous les sc√©narios d'une campagne
   */
  async getScenariosByCampaign(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId } = req.params;
      logger.info(`üìä R√©cup√©ration des sc√©narios - Project: ${projectId}, Campaign: ${campaignId}`);

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId)) {
        logger.warn(`IDs invalides - Project: ${projectId}, Campaign: ${campaignId}`);
        throw new AppError('ID de projet ou de campagne invalide', 400);
      }

      // 1. V√©rifier l'acc√®s au projet et la pr√©sence de la campagne dans le projet
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id } } }
        ],
        'campaigns._id': campaignId  // V√©rifie que la campagne est dans le tableau campaigns du projet
      });

      if (!project) {
        logger.warn(`Projet non trouv√© ou acc√®s refus√© - Project: ${projectId}, User: ${req.user._id}`);
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      // 2. V√©rifier que la campagne existe dans la collection Campaign
      const campaign = await Campaign.findById(campaignId);
      if (!campaign) {
        logger.warn(`Campagne non trouv√©e dans la collection - Campaign: ${campaignId}`);
        throw new AppError('Campagne non trouv√©e', 404);
      }

      // 3. R√©cup√©rer les sc√©narios
      logger.info(`üîç R√©cup√©ration des sc√©narios pour la campagne ${campaignId}...`);
      const scenarios = await this.scenarioService.getScenariosByCampaign(campaignId);
      logger.info(`‚úÖ ${scenarios.length} sc√©narios r√©cup√©r√©s pour la campagne ${campaignId}`);
      logger.info(`üìã IDs des sc√©narios r√©cup√©r√©s:`, scenarios.map(s => s._id));
      res.json(scenarios);

    } catch (err) {
      logger.error('‚ùå Erreur lors de la r√©cup√©ration des sc√©narios:', err);
      if (err instanceof AppError) {
        res.status(err.statusCode).json({ message: err.message });
      } else {
        res.status(500).json({ message: 'Erreur interne lors de la r√©cup√©ration des sc√©narios' });
      }
    }
  }

  /**
   * Cr√©e un nouveau sc√©nario dans une campagne
   */
  async createScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId } = req.params;
      const { name, description, targets, attacks, sequence } = req.body;
      logger.info(`üìù Cr√©ation d'un sc√©nario - Project: ${projectId}, Campaign: ${campaignId}`);

      if (!isValidObjectId(projectId)) {
        throw new AppError('ID de projet invalide', 400);
      }
      
      if (campaignId && !isValidObjectId(campaignId)) {
        throw new AppError('ID de campagne invalide', 400);
      }

      // 1. V√©rifier l'acc√®s au projet et la pr√©sence de la campagne dans le projet
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ],
        ...(campaignId ? { 'campaigns._id': campaignId } : {})
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      // 2. Si une campagne est sp√©cifi√©e, v√©rifier qu'elle existe dans la collection Campaign
      if (campaignId) {
        const campaign = await Campaign.findById(campaignId);
        if (!campaign) {
          throw new AppError('Campagne non trouv√©e', 404);
        }
      }

      // 3. Cr√©er le sc√©nario
      const scenario = await this.scenarioService.createScenario({
        name,
        description,
        projectId,
        campaignId,
        userId: req.user._id,
        targets: targets || [],
        attacks: attacks || [],
        sequence: sequence || false
      });

      // 4. Si le sc√©nario est cr√©√© dans une campagne, mettre √† jour les deux collections
      if (campaignId) {
        // Mettre √† jour le projet
        await Project.updateOne(
          { 
            _id: projectId, 
            'campaigns._id': campaignId 
          },
          {
            $push: {
              'campaigns.$.scenarios': {
                _id: scenario._id,
                name: scenario.name,
                status: scenario.status
              }
            }
          }
        );

        // Mettre √† jour la campagne
        await Campaign.updateOne(
          { _id: campaignId },
          {
            $push: { scenarioIds: scenario._id },
            $inc: { 
              'executionProgress.total': 1,
              'executionProgress.pending': 1
            }
          }
        );

        logger.info(`‚úÖ Sc√©nario ${scenario._id} ajout√© √† la campagne ${campaignId}`);
      }

      res.status(201).json(scenario);
    } catch (err) {
      logger.error('‚ùå Erreur lors de la cr√©ation du sc√©nario:', err);
      if (err instanceof AppError) {
        res.status(err.statusCode).json({ message: err.message });
      } else {
        res.status(500).json({ message: 'Erreur interne lors de la cr√©ation du sc√©nario' });
      }
    }
  }

  /**
   * R√©cup√®re un sc√©nario sp√©cifique
   */
  async getScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rifier l'acc√®s au projet
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      // V√©rifier que le sc√©nario appartient au bon projet et √† la bonne campagne
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      res.json(scenario);

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors de la r√©cup√©ration du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration du sc√©nario' });
      }
    }
  }

  /**
   * Met √† jour un sc√©nario
   */
  async updateScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;
      const updates = req.body;

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rifier l'acc√®s au projet avec droits d'√©dition
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      // V√©rifier que le sc√©nario appartient au bon projet et √† la bonne campagne
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      const updatedScenario = await this.scenarioService.updateScenario(scenarioId, updates);
      res.json(updatedScenario);

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors de la mise √† jour du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors de la mise √† jour du sc√©nario' });
      }
    }
  }

  /**
   * Supprime un sc√©nario
   */
  async deleteScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rifier l'acc√®s au projet avec droits d'√©dition
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      // V√©rifier que le sc√©nario appartient au bon projet et √† la bonne campagne
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      await this.scenarioService.deleteScenario(scenarioId);
      res.status(204).send();

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors de la suppression du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors de la suppression du sc√©nario' });
      }
    }
  }

  /**
   * D√©marre l'ex√©cution d'un sc√©nario
   */
  async startScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;
      logger.info(`üöÄ ScenarioController.startScenario - Project: ${projectId}, Campaign: ${campaignId}, Scenario: ${scenarioId}`);

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rifier l'acc√®s au projet avec droits d'ex√©cution
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      // V√©rifier que le sc√©nario appartient au bon projet et √† la bonne campagne
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      const updatedScenario = await this.scenarioService.startScenarioExecution(scenarioId);
      res.json(updatedScenario);

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors du d√©marrage du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors du d√©marrage du sc√©nario' });
      }
    }
  }

  /**
   * Arr√™te l'ex√©cution d'un sc√©nario
   */
  async stopScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rification similaire √† startScenario
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      const updatedScenario = await this.scenarioService.stopScenarioExecution(scenarioId);
      res.json(updatedScenario);

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors de l\'arr√™t du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors de l\'arr√™t du sc√©nario' });
      }
    }
  }

  /**
   * Met en pause l'ex√©cution d'un sc√©nario
   */
  async pauseScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rification similaire √† startScenario
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      const updatedScenario = await this.scenarioService.pauseScenarioExecution(scenarioId);
      res.json(updatedScenario);

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors de la mise en pause du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors de la mise en pause du sc√©nario' });
      }
    }
  }

  /**
   * Reprend l'ex√©cution d'un sc√©nario en pause
   */
  async resumeScenario(req: AuthRequest, res: Response) {
    try {
      const { projectId, campaignId, scenarioId } = req.params;

      if (!isValidObjectId(projectId) || !isValidObjectId(campaignId) || !isValidObjectId(scenarioId)) {
        throw new AppError('ID invalide', 400);
      }

      // V√©rification similaire √† startScenario
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id, role: { $in: ['editor', 'owner'] } } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenario = await this.scenarioService.getScenarioById(scenarioId);
      
      if (scenario.project.toString() !== projectId || scenario.campaign?.toString() !== campaignId) {
        throw new AppError('Sc√©nario non trouv√©', 404);
      }

      const updatedScenario = await this.scenarioService.resumeScenarioExecution(scenarioId);
      res.json(updatedScenario);

    } catch (error) {
      if (error instanceof AppError) {
        res.status(error.statusCode).json({ message: error.message });
      } else {
        logger.error('Erreur lors de la reprise du sc√©nario:', error);
        res.status(500).json({ message: 'Erreur lors de la reprise du sc√©nario' });
      }
    }
  }

  /**
   * R√©cup√®re tous les sc√©narios d'un projet
   */
  async getScenariosByProject(req: AuthRequest, res: Response) {
    try {
      const { projectId } = req.params;

      if (!isValidObjectId(projectId)) {
        throw new AppError('ID de projet invalide', 400);
      }

      // V√©rifier l'acc√®s au projet
      const project = await Project.findOne({
        _id: projectId,
        $or: [
          { owner: req.user._id },
          { 'sharedWith': { $elemMatch: { userId: req.user._id } } }
        ]
      });

      if (!project) {
        throw new AppError('Projet non trouv√© ou acc√®s refus√©', 403);
      }

      const scenarios = await this.scenarioService.getScenariosByProject(projectId);
      res.json(scenarios);
    } catch (error) {
      if (error instanceof AppError) {
        throw error;
      }
      logger.error('Erreur lors de la r√©cup√©ration des sc√©narios:', error);
      throw new AppError('Erreur lors de la r√©cup√©ration des sc√©narios', 500);
    }
  }
}
